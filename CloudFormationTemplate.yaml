AWSTemplateFormatVersion: '2010-09-09'
Description: AWS core resources to Grand Project

######################################

Parameters:
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro

  DBAllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: 20

  DBUsername:
    Description: The database username
    Type: String

  DBPassword:
    Description: The database password
    Type: String

  IAMRole:
    Description: IAM role for ECS task execution (LabRole)
    Type: String

######################################

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
    PrivateOne:
      CIDR: 10.0.2.0/24
    PrivateTwo:
      CIDR: 10.0.3.0/24

######################################

Resources:

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  # Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']

  # Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route tables with associations
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  PrivateRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  PrivateRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  # NAT gateways with attachments
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAAttachment.AllocationId
      SubnetId: !Ref PublicSubnetA
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBAttachment.AllocationId
      SubnetId: !Ref PublicSubnetB
  NatGatewayAAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayBAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  # Security groups
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  ContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref PublicLoadBalancerSG
  DatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access to RDS SQL Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ContainerSG

  # Load balancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
  TargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PublicLoadBalancer
    Properties:
      HealthCheckPath: /api/Ping
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupPublic
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS and ECR
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: enhanced-architecture-fargate
  AppRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: todolist
  AppService:
    Type: AWS::ECS::Service
    DependsOn:
      - AppTaskTaskDefinition
      - PublicLoadBalancerListener
      - DBInstance
      - DBConnection
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref AppTaskTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ContainerSG
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroupPublic
          ContainerName: todolist
          ContainerPort: 80
  # Task
  AppTaskTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: todolist-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref IAMRole
      TaskRoleArn: !Ref IAMRole
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
        - Name: todolist
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/todolist:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: ASPNETCORE_URLS
              Value: http://+:80
            - Name: ASPNETCORE_ENVIRONMENT
              Value: Production
          Secrets:
            - Name: ConnectionStrings__DefaultConnection
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/database/ConnectionStrings__DefaultConnection"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: todolist

  # Database - RDS SqlServer Instance
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: todolist
      Engine: postgres
      DBInstanceClass: !Ref DBInstanceClass
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: !Ref DBAllocatedStorage
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref DatabaseSG
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceIdentifier: my-db-instance

  # Subnet Group for RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS instance
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  # Store DB Username in Parameter Store
  DBUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /database/username
      Type: String
      Value: !Ref DBUsername

  # Store DB Password in Parameter Store
  DBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /database/password
      Type: String
      Value: !Ref DBPassword

  # Parameter Store for DB Connection String
  DBConnection:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /database/ConnectionStrings__DefaultConnection
      Type: String
      Value: !Sub "Server=${DBInstance.Endpoint.Address};Port=5432;Database=todolist;User Id=${DBUsername};Password=${DBPassword};"

  # Log Group for Backend
  CloudWatchGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/todolist

  # SNS Topic for CloudWatch Alarms
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "AlarmDatabaseConnections"
      Subscription:
        - Endpoint: "sebaprokoppp@gmail.com"
          Protocol: "email"

  # CloudWatch Alarm
  AlarmDatabaseConnections:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "opis pozaru"
      Namespace: "AWS/RDS"
      MetricName: "DatabaseConnections"
      Dimensions:
        - Name: "DBInstanceIdentifier"
          Value: "my-db-instance"
      Statistic: "Average"
      Period: 10  # seconds
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref AlarmTopic
      InsufficientDataActions: []
      OKActions: []

  # EventBridge Rule
  AlarmStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to respond to CloudWatch Alarm state changes"
      EventPattern:
        source:
          - "aws.cloudwatch"
        detail-type:
          - "CloudWatch Alarm State Change"
        resources:
          - !GetAtt AlarmDatabaseConnections.Arn
      State: "ENABLED"
      Targets:
        - Arn: !Ref AlarmTopic
          Id: "SendToSNS"

Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref VPC
  PublicSubnetA:
    Description: Public subnet A
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Description: Public subnet B
    Value: !Ref PublicSubnetB
  PrivateSubnetA:
    Description: Private subnet A
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Description: Private subnet B
    Value: !Ref PrivateSubnetB
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub http://${PublicLoadBalancer.DNSName}
